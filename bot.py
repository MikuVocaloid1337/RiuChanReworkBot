# bot.py

import os
import signal
import json
import logging
import time
from scam_rules import SCAM_KEYWORDS, SCAM_DOMAINS, SCAM_PATTERNS
from aiogram import Bot, Dispatcher, types, F, BaseMiddleware
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, Update, ChatMemberAdministrator, ChatMemberOwner
from collections import defaultdict, deque

class AntiSpamMiddleware(BaseMiddleware):
    def __init__(self, rate_limit=5, per_seconds=60, ban_time=60):
        super().__init__()
        self.rate_limit = rate_limit
        self.per_seconds = per_seconds
        self.ban_time = ban_time
        self.user_timestamps = defaultdict(lambda: deque(maxlen=rate_limit))
        self.banned_users = {}

    async def __call__(self, handler, event: Message, data):
        bot = data["bot"]
        user_id = event.from_user.id
        chat_id = event.chat.id

        # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
        member = await bot.get_chat_member(chat_id, user_id)
        if isinstance(member, (ChatMemberAdministrator, ChatMemberOwner)):
            return await handler(event, data)

        now = time.time()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
        if user_id in self.banned_users:
            if now < self.banned_users[user_id]:
                return
            else:
                del self.banned_users[user_id]

        timestamps = self.user_timestamps[user_id]
        timestamps.append(now)

        if len(timestamps) == self.rate_limit and (now - timestamps[0] < self.per_seconds):
            self.banned_users[user_id] = now + self.ban_time
            await event.answer(f"‚ö†Ô∏è –í—ã —Å–ª–∏—à–∫–æ–º –∞–∫—Ç–∏–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {self.ban_time} —Å–µ–∫—É–Ω–¥.")
            return

        return await handler(event, data)
        
class ScamFilterMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data):
        bot = data["bot"]
        user_id = event.from_user.id
        chat_id = event.chat.id

        # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
        member = await bot.get_chat_member(chat_id, user_id)
        if isinstance(member, (ChatMemberAdministrator, ChatMemberOwner)):
            return await handler(event, data)

        msg_text = event.text.lower()

        if any(word in msg_text for word in SCAM_KEYWORDS):
            await event.delete()
            await event.answer(f"‚ö†Ô∏è {event.from_user.full_name}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–∫–∞–º.")
            return

        if any(domain in msg_text for domain in SCAM_DOMAINS):
            await event.delete()
            await event.answer(f"üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
            return

        for pattern in SCAM_PATTERNS:
            if pattern.search(msg_text):
                await event.delete()
                await event.answer(f"üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫–∞–º.")
                return

        return await handler(event, data)

logging.basicConfig(
    level=logging.INFO,  # –º–æ–∂–Ω–æ DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

file_handler = logging.FileHandler("bot.log")
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter(
    "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
))
logger.addHandler(file_handler)

DATA_FOLDER = "data"
os.makedirs(DATA_FOLDER, exist_ok=True)


TOKEN = os.environ["TOKEN"]

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)

dp = Dispatcher()

def save_json(data, filename):
    path = os.path.join(DATA_FOLDER, filename)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_json(filename):
    path = os.path.join(DATA_FOLDER, filename)
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# --- –î–∞–Ω–Ω—ã–µ ---
skins = {
    "—Å—Ç": {
        "Ss+": ["summer Riu chan"],
        "S+": [],
        "A+": [],
    },
    "–≤–ø": {
        "S+": [],
        "A+": [],
        "B+": [],
        "C+": [],
        "D+": [],
    },
    "—Å–µ—Ç": {
        "S+": [
            {"name": "77 rings set", "parts": ["Top", "Mid", "Low"]},
            {"name": "Puchi heaven set", "parts": ["Mid", "Low"]},
            {"name": "Bruno set", "parts": ["Mid", "Low"]},
            {"name": "Fugo set", "parts": ["Mid", "Low"]},
        ]
    },
    "itm": {
        "SS+": ["Green baby"],
        "S+": ["Skull", "Heart", "Left arm of the saint corpse", "Pure arrow"],
        "A+": ["eye of the saint corpse", "Rib cage of the saint corpse", "Right arm of the saint corpse", "Tommy gun", "Double shot gun"],
        "B+": ["Axe", "Electric hilibard", "Poisonous scimitar", "Right leg of the saint corpse", "Left leg of the saint corpse", "Dio bone"],
        "C+": ["Pluck", "Revolver", "Pistol", "Requiem arrow", "Dio diary", "Locacaca"],
        "D+": ["Arrow", "Stone mask", "Steel ball"]
    },
    "–∫—Ä—Ñ": {
        "S+": ["Bruno zipper", "Fugo tie", "Blackmore mask", "Blackmore umbrella", "Johnny horseshoe", "Gyro taddybear"],
        "A+": ["Boss tie", "Pure meteor shard", "Passion badge", "Ladybug brush", "Killer tie"],
        "C+": ["Gold ingot", "Fabric", "Vampire blood", "Leather", "Meteor shards"],
        "D+": ["Steel ingot", "Wood", "Stone"]
    }
}

offers = load_json("offers.json")
lookings = load_json("lookings.json")
admins = set()
adm_codes = {"#VagueOwner", "#ShapkaKrutoi", "#MikuPikuBeam"}

def format_catalog():
    result = []
    for typ, categories in skins.items():
        result.append(f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {typ.upper()}*")
        for rarity, items in categories.items():
            result.append(f"  _–†–µ–¥–∫–æ—Å—Ç—å: {rarity}_")
            for item in items:
                if isinstance(item, str):
                    result.append(f"    {item}")
                elif isinstance(item, dict):
                    result.append(f"    {item['name']}")
                    result.append("     " + ", ".join(item["parts"]))
    return "\n".join(result)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def cmd_start(msg: types.Message):
    logger.info(f"/start –æ—Ç {msg.from_user.id} (@{msg.from_user.username})")
    await msg.reply("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@dp.message(Command("—è–ª–æ—Ö"))
async def cmd_help(msg: types.Message):
    logger.info(f"/—è–ª–æ—Ö –æ—Ç {msg.from_user.id} (@{msg.from_user.username})")
    text = (
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/—è–ª–æ—Ö ‚Äî —è - –æ–≤–æ—â—å, –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å\n"
        "!—Ç—Ä–µ–π–¥ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π —Ç—Ä–µ–π–¥\n"
        "!–ª—Ñ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –ª—Ñ\n"
        "!–æ—á–∏—Å—Ç–∏—Ç—å —Ç—Ä–µ–π–¥ ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Ç—Ä–µ–π–¥\n"
        "!–æ—á–∏—Å—Ç–∏—Ç—å –ª—Ñ ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –ª—Ñ\n"
        "+—Ç—Ä–µ–π–¥ [—Ç–∏–ø] [–Ω–∞–∑–≤–∞–Ω–∏–µ] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç—Ä–µ–π–¥\n"
        "+lf [—Ç–∏–ø] [–Ω–∞–∑–≤–∞–Ω–∏–µ] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –ª—Ñ\n"
        "–ü—Ä–∏–º–µ—Ä —Å–µ—Ç–∞:\n"
        "+—Ç—Ä–µ–π–¥ —Å–µ—Ç 77 rings set: Top, Mid\n"
        "+lf —Å–µ—Ç 77 rings set: Mid, Low"
    )
    await msg.reply(text)

@dp.message(F.text.startswith("+—Ç—Ä–µ–π–¥"))
async def add_trade(msg: types.Message):
    logger.info(f"+—Ç—Ä–µ–π–¥ –æ—Ç {msg.from_user.id} (@{msg.from_user.username})")
    user_id = msg.from_user.id
    lines = msg.text.split("\n")[1:] if "\n" in msg.text else [msg.text[7:]]
    offers.setdefault(user_id, []).extend([line.strip() for line in lines])
    save_json(offers, "offers.json")
    await msg.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç—Ä–µ–π–¥.")

@dp.message(F.text.startswith("+lf"))
async def add_lf(msg: types.Message):
    logger.info(f"+lf –æ—Ç {msg.from_user.id} (@{msg.from_user.username})")
    user_id = msg.from_user.id
    lines = msg.text.split("\n")[1:] if "\n" in msg.text else [msg.text[4:]]
    lookings.setdefault(user_id, []).extend([line.strip() for line in lines])
    save_json(lookings, "lookings.json")
    await msg.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ª—Ñ.")

@dp.message(F.text == "!—Ç—Ä–µ–π–¥")
async def show_trade(msg: types.Message):
    logger.info(f"!—Ç—Ä–µ–π–¥ –æ—Ç {msg.from_user.id} (@{msg.from_user.username})")
    user_id = msg.from_user.id
    trades = offers.get(user_id, [])
    if trades:
        await msg.answer("–¢–≤–æ–π —Ç—Ä–µ–π–¥:\n" + "\n".join(f"- {t}" for t in trades))
    else:
        await msg.answer("–¢—Ä–µ–π–¥ –ø—É—Å—Ç.")

@dp.message(F.text == "!–ª—Ñ")
async def show_lf(msg: types.Message):
    logger.info(f"!–ª—Ñ –æ—Ç {msg.from_user.id} (@{msg.from_user.username})")
    user_id = msg.from_user.id
    lfs = lookings.get(user_id, [])
    if lfs:
        await msg.answer("–¢—ã –∏—â–µ—à—å:\n" + "\n".join(f"- {t}" for t in lfs))
    else:
        await msg.answer("–õ—Ñ –ø—É—Å—Ç.")

@dp.message(F.text == "!–æ—á–∏—Å—Ç–∏—Ç—å —Ç—Ä–µ–π–¥")
async def clear_trade(msg: types.Message):
    offers[msg.from_user.id] = []
    save_json(offers, "offers.json")
    await msg.answer("–¢—Ä–µ–π–¥ –æ—á–∏—â–µ–Ω.")

@dp.message(F.text == "!–æ—á–∏—Å—Ç–∏—Ç—å –ª—Ñ")
async def clear_lf(msg: types.Message):
    lookings[msg.from_user.id] = []
    save_json(lookings, "lookings.json")
    await msg.answer("–õ—Ñ –æ—á–∏—â–µ–Ω.")

@dp.message(F.text.in_(["ss —Å—Ç", "s –≤–ø", "—Å–µ—Ç a+", "itm b+", "–∫—Ä—Ñ s+"]))
async def show_catalog_handler(msg: types.Message):
    await msg.answer(format_catalog())

@dp.message(F.text.in_(adm_codes))
async def activate_admin(msg: types.Message):
    user_id = msg.from_user.id
    admins.add(user_id)
    adm_codes.remove(msg.text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø.")
    await msg.answer("–¢–µ–ø–µ—Ä—å —Ç—ã –∞–¥–º–∏–Ω. –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã.")

# ID –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
TARGET_CHAT_ID = -1002170558932_1  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —Å–≤–æ–µ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞

@dp.message(F.chat.type == "private")
async def forward_to_channel(message: Message):
    # –ß—Ç–æ–±—ã –ø–µ—Ä–µ—Å—ã–ª–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —É–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID
    if message.from_user.id != 690469640:
        return

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if message.text:
        await bot.send_message(chat_id=TARGET_CHAT_ID, text=message.text)

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    elif message.photo:
        await bot.send_photo(chat_id=TARGET_CHAT_ID, photo=message.photo[-1].file_id, caption=message.caption or "")
    elif message.video:
        await bot.send_video(chat_id=TARGET_CHAT_ID, video=message.video.file_id, caption=message.caption or "")
    elif message.document:
        await bot.send_document(chat_id=TARGET_CHAT_ID, document=message.document.file_id, caption=message.caption or "")
    else:
        await message.answer("‚õî –≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

@dp.errors()
async def error_handler(update: Update, exception: Exception):
    logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è {update}: {exception}")
    return True

@dp.message()
async def echo_handler(message: Message):
    logger.info(f"—Å–æ–æ–±—â–µ–Ω–∏–µ.")
    
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    dp.message.middleware(AntiSpamMiddleware(rate_limit=5, per_seconds=60, ban_time=60))
    dp.message.middleware(ScamFilterMiddleware())
    try:
        await dp.start_polling(bot)
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
